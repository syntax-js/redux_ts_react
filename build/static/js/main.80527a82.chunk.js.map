{"version":3,"sources":["_components/TaskForm.tsx","_components/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Step","Steps","RangePicker","DatePicker","Option","Select","TaskForm","customIcons","1","StarOutlined","2","3","4","5","useState","current","setCurrent","tailLayout","wrapperCol","offset","tailLayout1","tailLayout2","nextHandler","console","log","className","style","display","justifyContent","alignItems","marginTop","title","bordered","width","onChange","labelCol","span","initialValues","remember","name","Item","label","rules","required","message","placeholder","allowClear","value","type","onClick","TextArea","showTime","defaultValue","character","index","placement","onConfirm","notification","success","description","okText","cancelText","Header","Layout","Content","Footer","HomePage","Sider","position","zIndex","theme","mode","key","count","backgroundColor","minHeight","textAlign","background","margin","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"kZAeQA,EAASC,IAATD,KACAE,EAAgBC,IAAhBD,YACAE,EAAWC,IAAXD,OAuPOE,EArPE,WACf,IAAMC,EAAmB,CACvBC,EAAG,kBAACC,EAAA,EAAD,MACHC,EAAG,kBAACD,EAAA,EAAD,MACHE,EAAG,kBAACF,EAAA,EAAD,MACHG,EAAG,kBAACH,EAAA,EAAD,MACHI,EAAG,kBAACJ,EAAA,EAAD,OANgB,EASSK,mBAAS,GATlB,mBASdC,EATc,KASLC,EATK,KAqBfC,EAAa,CACjBC,WAAY,CAAEC,OAAQ,KAQlBC,EAAc,CAClBF,WAAY,CAAEC,OAAQ,KAQlBE,EAAc,CAClBH,WAAY,CAAEC,OAAQ,KAGlBG,EAAc,WAClBC,QAAQC,IAAI,UAWd,OACE,yBACEC,UAAU,gCACVC,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,UAAW,SAGb,kBAAC,IAAD,CACEC,MAAM,YACNC,UAAU,EACVN,MAAO,CACLO,MAAO,QAGT,kBAAC,IAAD,CAAOlB,QAASA,EAASmB,SA7DX,SAACnB,GACnBQ,QAAQC,IAAIT,EAAS,kBACrBC,EAAWD,KA4DL,kBAACf,EAAD,CAAM+B,MAAM,qBACZ,kBAAC/B,EAAD,CAAM+B,MAAM,eACZ,kBAAC/B,EAAD,CAAM+B,MAAM,yBAGF,GAAXhB,GACC,kBAAC,IAAD,iBA/DO,CACboB,SAAU,CAAEC,KAAM,GAClBlB,WAAY,CAAEC,OAAQ,IA6DhB,CAEEkB,cAAe,CAAEC,UAAU,GAC3BC,KAAK,QACLb,MAAO,CAAEI,UAAW,UAEpB,kBAAC,IAAKU,KAAN,CACEC,MAAM,WACNF,KAAK,WACLG,MAAO,CACL,CAAEC,UAAU,EAAMC,QAAS,gCAG7B,kBAAC,IAAD,OAEF,kBAAC,IAAKJ,KAAN,CACEC,MAAM,QACNF,KAAK,QACLG,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,6BAEnC,kBAAC,IAAD,OAGF,kBAAC,IAAKJ,KAAN,CACED,KAAK,UACLE,MAAM,UACNC,MAAO,CACL,CAAEC,UAAU,EAAMC,QAAS,gCAG7B,kBAAC,IAAD,CACEC,YAAY,mBAEZC,YAAU,GAEV,kBAAC1C,EAAD,CAAQ2C,MAAM,QAAd,OACA,kBAAC3C,EAAD,CAAQ2C,MAAM,UAAd,SACA,kBAAC3C,EAAD,CAAQ2C,MAAM,SAAd,YAIJ,kBAAC,IAAKP,KAASvB,EACb,kBAAC,IAAD,CAAQ+B,KAAK,UAAUC,QAAS3B,GAAhC,UAOM,GAAXP,GACC,kBAAC,IAAD,iBAxGQ,CACdoB,SAAU,CAAEC,KAAM,GAClBlB,WAAY,CAAEC,OAAQ,IAsGhB,CAEEkB,cAAe,CAAEC,UAAU,GAC3BC,KAAK,QACLb,MAAO,CAAEI,UAAW,UAEpB,kBAAC,IAAKU,KAAN,CACEC,MAAM,cACNF,KAAK,cACLG,MAAO,CACL,CAAEC,UAAU,EAAMC,QAAS,mCAG7B,kBAAC,IAAMM,SAAP,OAEF,kBAAC,IAAKV,KAAN,CACED,KAAK,cACLE,MAAM,cACNC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,qCAIb,kBAAC1C,EAAD,CAAaiD,UAAQ,KAEvB,kBAAC,IAAKX,KAAN,CACED,KAAK,UACLE,MAAM,sBACNC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,wCAIb,kBAAC,IAAD,CACEQ,aAAc,EACdC,UAAW,YAAqB,IAAlBC,EAAiB,EAAjBA,MACZ,OAAO/C,EAAY+C,EAAQ,OAIjC,kBAAC,IAAKd,KAASpB,EACb,kBAAC,IAAD,CAAQ4B,KAAK,UAAUC,QAAS3B,GAAhC,UAOM,GAAXP,GACC,kBAAC,IAAD,iBApJQ,CACdoB,SAAU,CAAEC,KAAM,GAClBlB,WAAY,CAAEC,OAAQ,IAkJhB,CAEEkB,cAAe,CAAEC,UAAU,GAC3BC,KAAK,QACLb,MAAO,CAAEI,UAAW,UAEpB,kBAAC,IAAKU,KAAN,CACEC,MAAM,0BACNF,KAAK,cACLG,MAAO,CACL,CAAEC,UAAU,EAAMC,QAAS,mCAG7B,kBAAC,IAAD,CACEC,YAAY,uBAEZC,YAAU,GAEV,kBAAC1C,EAAD,CAAQ2C,MAAM,QAAd,kBACA,kBAAC3C,EAAD,CAAQ2C,MAAM,UAAd,UACA,kBAAC3C,EAAD,CAAQ2C,MAAM,SAAd,cAGJ,kBAAC,IAAKP,KAAN,CACEC,MAAM,8BACNF,KAAK,mBACLG,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,uCAIb,kBAAC,IAAD,CACEC,YAAY,2BAEZC,YAAU,GAEV,kBAAC1C,EAAD,CAAQ2C,MAAM,QAAd,YACA,kBAAC3C,EAAD,CAAQ2C,MAAM,UAAd,WACA,kBAAC3C,EAAD,CAAQ2C,MAAM,SAAd,YAGJ,kBAAC,IAAKP,KAASnB,EACb,kBAAC,IAAD,CACEkC,UAAU,WACVxB,MAAO,0BACPyB,UAtLW,WACvBC,IAAaC,QAAQ,CACnBd,QAAS,eACTe,YACE,6HAmLQC,OAAO,MACPC,WAAW,MAEX,kBAAC,IAAD,CAAQb,KAAK,UAAUC,QAAS3B,GAAhC,gBCvPRwC,EAAmCC,IAAnCD,OAAQE,EAA2BD,IAA3BC,QAASC,EAAkBF,IAAlBE,OA6CVC,GA7C4BH,IAAVI,MAEhB,WAAO,IAAD,EACgBrD,oBAAS,GADzB,6BAOrB,OACE,kBAAC,IAAD,KACE,kBAACgD,EAAD,CAAQpC,MAAO,CAAE0C,SAAU,QAASC,OAAQ,EAAGpC,MAAO,SACpD,yBAAKR,UAAU,SACf,kBAAC,IAAD,CACE6C,MAAM,OACNC,KAAK,aACL7C,MAAO,CAAEC,QAAS,OAAQC,eAAgB,aAE1C,kBAAC,IAAKY,KAAN,CAAWgC,IAAI,KAAf,QACA,kBAAC,IAAKhC,KAAN,CAAWgC,IAAI,KAAf,SACA,kBAAC,IAAKhC,KAAN,CAAWgC,IAAI,KACb,kBAAC,IAAD,CACEC,MAAO,EACPtD,OAAQ,CAAC,GAAI,GACbO,MAAO,CAAEgD,gBAAiB,YAH5B,YAUN,kBAAC,IAAD,CAAQhD,MAAO,CAAEiD,UAAW,SAC1B,kBAACX,EAAD,KACE,kBAAC,EAAD,QAGJ,kBAACC,EAAD,CACEvC,MAAO,CAAEkD,UAAW,SAAUC,WAAY,QAASC,OAAQ,UAD7D,gCChCSC,EAJH,WACV,OAAO,kBAAC,EAAD,OCMWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1E,QAAQ0E,MAAMA,EAAMrD,c","file":"static/js/main.80527a82.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Card,\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Steps,\r\n  Select,\r\n  Rate,\r\n  DatePicker,\r\n  Popconfirm,\r\n  notification,\r\n} from \"antd\";\r\nimport { StarOutlined, RadiusUprightOutlined } from \"@ant-design/icons\";\r\n\r\nconst { Step } = Steps;\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\n\r\nconst TaskForm = () => {\r\n  const customIcons: any = {\r\n    1: <StarOutlined />,\r\n    2: <StarOutlined />,\r\n    3: <StarOutlined />,\r\n    4: <StarOutlined />,\r\n    5: <StarOutlined />,\r\n  };\r\n\r\n  const [current, setCurrent] = useState(0);\r\n\r\n  const stepHandler = (current: any) => {\r\n    console.log(current, \"curret Logiigg\");\r\n    setCurrent(current);\r\n  };\r\n\r\n  const layout = {\r\n    labelCol: { span: 3 },\r\n    wrapperCol: { offset: 2 },\r\n  };\r\n\r\n  const tailLayout = {\r\n    wrapperCol: { offset: 22 },\r\n  };\r\n\r\n  const layout1 = {\r\n    labelCol: { span: 3 },\r\n    wrapperCol: { offset: 2 },\r\n  };\r\n\r\n  const tailLayout1 = {\r\n    wrapperCol: { offset: 22 },\r\n  };\r\n\r\n  const layout2 = {\r\n    labelCol: { span: 6 },\r\n    wrapperCol: { offset: 2 },\r\n  };\r\n\r\n  const tailLayout2 = {\r\n    wrapperCol: { offset: 22 },\r\n  };\r\n\r\n  const nextHandler = () => {\r\n    console.log(\"Hello\");\r\n  };\r\n\r\n  const openNotification = () => {\r\n    notification.success({\r\n      message: \"Thanks mate!\",\r\n      description:\r\n        \"We are submitting your task list to your project manager & team leader. Once you get approval, you start working on it.\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"site-card-border-less-wrapper\"\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        marginTop: \"80px\",\r\n      }}\r\n    >\r\n      <Card\r\n        title=\"Add Task:\"\r\n        bordered={true}\r\n        style={{\r\n          width: \"60%\",\r\n        }}\r\n      >\r\n        <Steps current={current} onChange={stepHandler}>\r\n          <Step title=\"Choose a Project\"></Step>\r\n          <Step title=\"Add a Task\" />\r\n          <Step title=\"Submit for Approval\" />\r\n        </Steps>\r\n\r\n        {current == 0 && (\r\n          <Form\r\n            {...layout}\r\n            initialValues={{ remember: true }}\r\n            name=\"basic\"\r\n            style={{ marginTop: \"50px\" }}\r\n          >\r\n            <Form.Item\r\n              label=\"Fullname\"\r\n              name=\"Fullname\"\r\n              rules={[\r\n                { required: true, message: \"Please input your fullname\" },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item\r\n              label=\"Email\"\r\n              name=\"Email\"\r\n              rules={[{ required: true, message: \"Please input your email\" }]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              name=\"Project\"\r\n              label=\"Project\"\r\n              rules={[\r\n                { required: true, message: \"Please choose your project\" },\r\n              ]}\r\n            >\r\n              <Select\r\n                placeholder=\"Choose a project\"\r\n                // onChange={onGenderChange}\r\n                allowClear\r\n              >\r\n                <Option value=\"male\">RKI</Option>\r\n                <Option value=\"female\">TVTOB</Option>\r\n                <Option value=\"other\">PADWAN</Option>\r\n              </Select>\r\n            </Form.Item>\r\n\r\n            <Form.Item {...tailLayout}>\r\n              <Button type=\"primary\" onClick={nextHandler}>\r\n                Next\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        )}\r\n\r\n        {current == 1 && (\r\n          <Form\r\n            {...layout1}\r\n            initialValues={{ remember: true }}\r\n            name=\"basic\"\r\n            style={{ marginTop: \"50px\" }}\r\n          >\r\n            <Form.Item\r\n              label=\"Description\"\r\n              name=\"Description\"\r\n              rules={[\r\n                { required: true, message: \"Please input your description\" },\r\n              ]}\r\n            >\r\n              <Input.TextArea />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"Date & Time\"\r\n              label=\"Date & Time\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please date & time for the task\",\r\n                },\r\n              ]}\r\n            >\r\n              <RangePicker showTime />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"Project\"\r\n              label=\"Level of Diffculty:\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please choose your diffculty Level\",\r\n                },\r\n              ]}\r\n            >\r\n              <Rate\r\n                defaultValue={3}\r\n                character={({ index }: any) => {\r\n                  return customIcons[index + 1];\r\n                }}\r\n              />\r\n            </Form.Item>\r\n            <Form.Item {...tailLayout1}>\r\n              <Button type=\"primary\" onClick={nextHandler}>\r\n                Next\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        )}\r\n\r\n        {current == 2 && (\r\n          <Form\r\n            {...layout2}\r\n            initialValues={{ remember: true }}\r\n            name=\"basic\"\r\n            style={{ marginTop: \"50px\" }}\r\n          >\r\n            <Form.Item\r\n              label=\"Choose your Team Leader\"\r\n              name=\"Description\"\r\n              rules={[\r\n                { required: true, message: \"Please input your team leader\" },\r\n              ]}\r\n            >\r\n              <Select\r\n                placeholder=\"Choose a team leader\"\r\n                // onChange={onGenderChange}\r\n                allowClear\r\n              >\r\n                <Option value=\"male\">SenthilKumaran</Option>\r\n                <Option value=\"female\">Sridar</Option>\r\n                <Option value=\"other\">Angappan</Option>\r\n              </Select>\r\n            </Form.Item>\r\n            <Form.Item\r\n              label=\"Choose your Project Manager\"\r\n              name=\"project mananger\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please input your project manager\",\r\n                },\r\n              ]}\r\n            >\r\n              <Select\r\n                placeholder=\"Choose a project Manager\"\r\n                // onChange={onGenderChange}\r\n                allowClear\r\n              >\r\n                <Option value=\"male\">Rajkumar</Option>\r\n                <Option value=\"female\">Nakeran</Option>\r\n                <Option value=\"other\">Sridar</Option>\r\n              </Select>\r\n            </Form.Item>\r\n            <Form.Item {...tailLayout2}>\r\n              <Popconfirm\r\n                placement=\"rightTop\"\r\n                title={\"Can we submit the task?\"}\r\n                onConfirm={openNotification}\r\n                okText=\"Yes\"\r\n                cancelText=\"No\"\r\n              >\r\n                <Button type=\"primary\" onClick={nextHandler}>\r\n                  Submit\r\n                </Button>\r\n              </Popconfirm>\r\n            </Form.Item>\r\n          </Form>\r\n        )}\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskForm;\r\n","import React, { useState } from \"react\";\r\nimport \"../App.css\";\r\nimport { Layout, Menu, Badge } from \"antd\";\r\nimport TaskForm from \"./TaskForm\";\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\n\r\nconst HomePage = () => {\r\n  const [collapse, setCollapse]: any = useState(false);\r\n\r\n  const onCollapse = (collapsed: any) => {\r\n    console.log(collapsed);\r\n    setCollapse(collapsed);\r\n  };\r\n  return (\r\n    <Layout>\r\n      <Header style={{ position: \"fixed\", zIndex: 1, width: \"100%\" }}>\r\n        <div className=\"logo\" />\r\n        <Menu\r\n          theme=\"dark\"\r\n          mode=\"horizontal\"\r\n          style={{ display: \"flex\", justifyContent: \"flex-end\" }}\r\n        >\r\n          <Menu.Item key=\"1\">Home</Menu.Item>\r\n          <Menu.Item key=\"2\">About</Menu.Item>\r\n          <Menu.Item key=\"3\">\r\n            <Badge\r\n              count={5}\r\n              offset={[14, 0]}\r\n              style={{ backgroundColor: \"#2db7f5\" }}\r\n            >\r\n              Tasks\r\n            </Badge>\r\n          </Menu.Item>\r\n        </Menu>\r\n      </Header>\r\n      <Layout style={{ minHeight: \"90vh\" }}>\r\n        <Content>\r\n          <TaskForm />\r\n        </Content>\r\n      </Layout>\r\n      <Footer\r\n        style={{ textAlign: \"center\", background: \"white\", margin: \"0 2px\" }}\r\n      >\r\n        © All Rights Reserved.\r\n      </Footer>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport \"antd/dist/antd.css\";\nimport HomePage from \"./_components/index\";\n\nconst App = () => {\n  return <HomePage />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}